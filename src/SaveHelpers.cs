using MRobot.CivilizationV.Game;
using MRobot.CivilizationV.Game.Maps;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MRobot.CivilizationV
{
    internal static class SaveHelpers
    {
        internal const int StandardSectionBlockCount = 64;

        internal const int MaxPlayers = 22;

        internal const int CityStateBlocks = StandardSectionBlockCount - MaxPlayers - 1;

        internal static int SectionDelimiter = 0x40;

        internal static readonly byte[] FileStart = new byte[] { 0x43, 0x49, 0x56, 0x35 }; //CIV5

        internal static readonly byte[] FullBlock = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF };

        internal static readonly byte[] OneBlock = new byte[] { 0x01, 0x01, 0x01, 0x01 };

        internal const string TextKeyPrefix = "TXT_KEY_";

        internal static SaveString ConvertOptionEnumToSaveStr(Enum optionEnum)
        {
            SaveString str = new SaveString(optionEnum.ToString(), allCaps: true);
            if (optionEnum is PlayerDifficulty)
                str.Prefix = "HANDICAP";
            else if (optionEnum is GameEra)
                str.Prefix = "ERA";
            else if (optionEnum is GamePace)
                str.Prefix = "GAMESPEED";
            else if (optionEnum is MapSize)
                str.Prefix = "WORLDSIZE";
            return str;
        }

        internal static byte[] GetExpectedCrazyMapSizeBytes(GameConfig gameSave)
        {
            MapSize mapSize = gameSave.Map.Size.Value;
            bool GodsAndKings = gameSave.Expansions.Contains(Expansion.GodsAndKings);
            bool BraveNewWorld = gameSave.Expansions.Contains(Expansion.BraveNewWorld);

            using(var stream = new MemoryStream())
            using (var writer = new BinaryWriter(stream))
            {
                var crazyMapSizeBytes = CrazyMapSizeBytes[mapSize];

                writer.Write(crazyMapSizeBytes, 0, 44);

                if (GodsAndKings || BraveNewWorld)
                    writer.Write(crazyMapSizeBytes, 44, 4);

                writer.Write(crazyMapSizeBytes, 48, 20);

                if (BraveNewWorld)
                    writer.Write(crazyMapSizeBytes, 68, 8);
                else writer.Write(new byte[] { 0x0F, 0x00, 0x00, 0x00 });

                writer.Write(crazyMapSizeBytes, crazyMapSizeBytes.Length - 4, 4);

                return stream.ToArray();
            }
        }

        private static readonly IDictionary<MapSize, byte[]> CrazyMapSizeBytes = new Dictionary<MapSize, byte[]>()
        {
            { 
                MapSize.Duel, 
                new byte[] { 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
                             0x32, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                             0xCE, 0xFF, 0xFF, 0xFF, 0x28, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
                             0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x64, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 
                             0x64, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }  
            },
            { 
                MapSize.Tiny, 
                new byte[] { 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
                             0x28, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                             0xE7, 0xFF, 0xFF, 0xFF, 0x38, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
                             0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x64, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 
                             0x64, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 }
            },
            { 
                MapSize.Small, 
                new byte[] { 0x06, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
                             0x1E, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 
                             0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00, 
                             0x64, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00 }
            },
            { 
                MapSize.Standard, 
                new byte[] { 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
                             0x14, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 
                             0x19, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 
                             0x64, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00 }
            },
            { 
                MapSize.Large, 
                new byte[] { 0x0A, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 
                             0x0A, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00, 
                             0x32, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 
                             0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x00, 
                             0x50, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00 }
            },
            { 
                MapSize.Huge, 
                new byte[] { 0x0C, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 
                             0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 
                             0x4B, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 
                             0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 
                             0x3C, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00 }
            },

        };
    }
}
